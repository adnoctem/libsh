#!/usr/bin/env bash
#
# Install `bashlib`s library sources into a subdirectory within your repository with Git Subtree.
# This script largely relies on community provided sources (GitHub Gist) for the actual Git
# logic.
#
# This is a self-contained Bash script, shipped and used as an executable.
#
# ref: https://gist.github.com/tswaters/542ba147a07904b1f3f5

# -------------------------
#   GLOBAL defaults
# -------------------------

DESTINATION="$(pwd)/lib"

# -------------------------
#   Utility functions
# -------------------------

# Write un-colored output to stdout
log() {
	if [[ $# -eq 1 ]]; then
		echo -e "$1" &>/dev/null
	else
		echo -e "\033[1;${1}${2}\033[0m"
	fi
}

# Write red output to stdout
log::red() {
	log "31m" "${1}"
}

# Write yellow output to stdout
log::yellow() {
	log "33m" "${1}"
}

# Write green output to stdout
log::green() {
	log "32m" "${1}"
}

# Check if the required dependencies for the scripts are installed.
function dep_check() {
	local deps=('git')

	for dep in "${deps[@]}"; do
		package::is_executable "${dep}"
		rc=$?

		if [ $rc -ne 0 ]; then
			log::red "Could not find package '${dep}' in system PATH. Please install '${dep}' to use 'subtree'!"
			return 1
		fi

		return
	done
}

#######################################
# Print the usage output for the script.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Writes usage to stdout
#######################################
function libinstall::usage() {
	local script_name

	script_name=$(basename "${0}")

	echo "$script_name"
	echo
	echo "Pull bashlib's library sources into your repository with Git Subtree."
	echo "By default the sources are pulled into scripts/lib in your working directory."
	echo
	echo "Usage: ./scripts/$script_name <DESTINATION>"
	echo
	echo "help    - Print this usage information"
	echo "pull    - Pull the upstream bashlib sources"
	echo "update  - Update the upstream bashlib sources"
	echo
	echo "Examples:"
	echo "  ./scripts/$script_name pull (with configured or default Globals)"
	echo "  ./scripts/$script_name pull ./src/lib"
	echo "  ./scripts/$script_name update (with configured or default Globals)"
	echo "  ./scripts/$script_name update ./src/lib"
}

#######################################
# Pull the upstream sources.
# Globals:
#   DESTINATION
# Arguments:
#   A destination file path to pull the
#   source files to.
# Returns:
#   The parent return value of the latest
#   'git' operation.
#######################################
function libinstall::pull() {
	local destination_path

	destination_path=${1:-"$DESTINATION"}
	paths::ensure_existence "$destination_path"

	# add bashlib remote, create a new tracking branch
	git remote add -f bashlib-upstream https://github.com/fmjstudios/bashlib.git
	git checkout -b upstream/bashlib bashlib-upstream/main

	# split off subdir of tracking branch into separate branch
	git subtree split -q --squash --prefix=lib --annotate="[bashlib] " --rejoin -b merging/bashlib

	# add separate branch as subdirectory on master.
	git checkout master
	git subtree add --prefix=bashlib-lib --squash merging/bashlib
}

#######################################
# Update the upstream sources.
# Globals:
#   DESTINATION
# Arguments:
#   An (existing) destination file path
#   to update.
# Returns:
#   The parent return value of the latest
#   'git' operation.
#######################################
function libinstall::update() {
	local destination_path

	destination_path=${1:-"$DESTINATION"}
	if [ ! -d "$destination_path" ]; then
		log::red "Destination path \"$destination_path\" does not exist! Cannot update non-existent sources."
		exit 1
	fi

	# switch back to tracking branch, fetch & rebase.
	git checkout upstream/bashlib
	git pull bashlib-upstream/main

	# update the separate branch with changes from upstream
	git subtree split -q --prefix=lib --annotate="[bashlib] " --rejoin -b merging/bashlib

	# switch back to master and use subtree merge to update the subdirectory
	git checkout master
	git subtree merge -q --prefix=lib --squash merging/bashlib
}

# --------------------------------
#   MAIN
# --------------------------------
function main() {
	local cmd=${1}

	dep_check

	case "${cmd}" in
	help)
		libinstall::usage
		;;
	pull)
		libinstall::pull "$@"
		return $?
		;;
	update)
		libinstall::update "$@"
		return $?
		;;
	*)
		log::yellow "Unknown command: ${cmd}. See 'help' command for usage information:"
		libinstall::usage
		return $?
		;;
	esac
}

# ------------
# 'main' call
# ------------
main "$@"
